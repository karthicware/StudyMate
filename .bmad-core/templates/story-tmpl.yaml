# <!-- Powered by BMAD‚Ñ¢ Core -->
template:
  id: story-template-v2
  name: Story Document
  version: 2.0
  output:
    format: markdown
    filename: docs/stories/{{epic_num}}.{{story_num}}.{{story_title_short}}.md
    title: "Story {{epic_num}}.{{story_num}}: {{story_title_short}}"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

agent_config:
  editable_sections:
    - Status
    - Story
    - Acceptance Criteria
    - Tasks / Subtasks
    - Dev Notes
    - Testing
    - Change Log

sections:
  - id: status
    title: Status
    type: choice
    choices: [Draft, Approved, InProgress, Review, Done]
    instruction: Select the current status of the story
    owner: scrum-master
    editors: [scrum-master, dev-agent]

  - id: story
    title: Story
    type: template-text
    template: |
      **As a** {{role}},
      **I want** {{action}},
      **so that** {{benefit}}
    instruction: Define the user story using the standard format with role, action, and benefit
    elicit: true
    owner: scrum-master
    editors: [scrum-master]

  - id: acceptance-criteria
    title: Acceptance Criteria
    type: numbered-list
    instruction: Copy the acceptance criteria numbered list from the epic file
    elicit: true
    owner: scrum-master
    editors: [scrum-master]

  - id: tasks-subtasks
    title: Tasks / Subtasks
    type: bullet-list
    instruction: |
      Break down the story into specific tasks and subtasks needed for implementation.
      Reference applicable acceptance criteria numbers where relevant.

      FOR UI/FULL-STACK STORIES - MANDATORY FIRST TASK:
      Add as the FIRST task before any implementation tasks:
      - [ ] **MANDATORY PRE-IMPLEMENTATION**: Read docs/guidelines/ui-testing-locators-mandatory.md
        - [ ] Review complete checklist of 40+ testable element types
        - [ ] Review naming conventions for data-testid attributes
        - [ ] Review 14 validation commands to run before commit
    template: |
      - [ ] Task 1 (AC: # if applicable)
        - [ ] Subtask1.1...
      - [ ] Task 2 (AC: # if applicable)
        - [ ] Subtask 2.1...
      - [ ] Task 3 (AC: # if applicable)
        - [ ] Subtask 3.1...
    elicit: true
    owner: scrum-master
    editors: [scrum-master, dev-agent]

  - id: dev-notes
    title: Dev Notes
    instruction: |
      Populate relevant information, only what was pulled from actual artifacts from docs folder, relevant to this story:
      - Do not invent information
      - If known add Relevant Source Tree info that relates to this story
      - If there were important notes from previous story that are relevant to this one, include them here
      - Put enough information in this section so that the dev agent should NEVER need to read the architecture documents, these notes along with the tasks and subtasks must give the Dev Agent the complete context it needs to comprehend with the least amount of overhead the information to complete the story, meeting all AC and completing all tasks+subtasks
    elicit: true
    owner: scrum-master
    editors: [scrum-master]
    sections:
      - id: testing-standards
        title: Testing
        instruction: |
          List Relevant Testing Standards from Architecture the Developer needs to conform to:
          - Test file location
          - Test standards
          - Testing frameworks and patterns to use
          - Any specific testing requirements for this story

          For UI/Full-Stack stories with E2E tests:
          - MANDATORY: Read docs/guidelines/ui-testing-locators-mandatory.md (all UI elements need data-testid)
          - MANDATORY: Read docs/guidelines/e2e-quality-gates-mandatory.md (6 critical quality gates)
          - MANDATORY: Follow docs/architecture/coding-standards.md E2E section
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: e2e-integration-testing
        title: E2E Integration Testing Requirements
        instruction: |
          For UI/Full-Stack stories only. Specify E2E integration tests that validate backend + frontend together.
          Use E2E test infrastructure (backend test server on port 8081, test database studymate_test).

          MANDATORY PRE-IMPLEMENTATION CHECKLIST (5 minutes - saves 60+ minutes):
          - [ ] Read docs/guidelines/e2e-authentication-mandatory.md (CRITICAL - Real auth required, NO mocks)
          - [ ] Read docs/lessons-learned/e2e-testing-anti-patterns-story-1.4.1.md (MANDATORY - Original 5 anti-patterns)
          - [ ] Read docs/lessons-learned/e2e-testing-anti-patterns-story-1.4-remediation.md (CRITICAL - Anti-Pattern #6)
          - [ ] Read docs/guidelines/ui-testing-locators-mandatory.md (MANDATORY - data-testid requirements)
          - [ ] Read docs/testing/e2e-quality-gates-quick-reference.md (Quick Reference Card)
          - [ ] Read existing E2E tests in feature area (e2e/*.spec.ts)
          - [ ] Read component template and SCSS files
          - [ ] Verify API configuration in environment.ts

          CRITICAL: 6 ANTI-PATTERNS TO AVOID:
          1. ‚ùå Ambiguous Selectors (use scoped selectors with parent class)
          2. ‚ùå Selector Ambiguity (multiple matches cause strict mode violations)
          3. ‚ùå Path-Only Route Mocking (always use full URL: http://localhost:8081/api/v1/...)
          4. ‚ùå CSS Targeting Wrong Element (read SCSS to identify actual styled element)
          5. ‚ùå Not Reading Existing Tests (ALWAYS read existing tests FIRST)
          6. ‚≠ê Missing data-testid Attributes (ADD DURING COMPONENT DEVELOPMENT, NOT E2E TESTING) ‚≠ê

          MANDATORY REQUIREMENTS (NON-NEGOTIABLE):

          üìã **UI Testing Locators** (docs/guidelines/ui-testing-locators-mandatory.md):
          - ‚ö†Ô∏è ALL interactive UI elements MUST have data-testid attributes (40+ element types - see guideline)
          - ‚ö†Ô∏è Add data-testid DURING component development (NOT during E2E testing)
          - ‚ö†Ô∏è Follow naming convention: {component}-{element-type}-{action/purpose}
          - ‚ö†Ô∏è Run 14 validation commands before commit (must return ZERO violations)
          - ‚ö†Ô∏è NO EXCEPTIONS - Any missing data-testid = Story REJECTED

          üîê **E2E Authentication Requirements** (docs/guidelines/e2e-authentication-mandatory.md):
          - ‚ö†Ô∏è ALL E2E tests MUST use REAL authentication (NO mocked tokens, NO bypassing login)
          - ‚ö†Ô∏è Use `loginAsOwnerAPI(page)` or `loginAsStudentAPI(page)` from auth-helpers.ts
          - ‚ö†Ô∏è Test credentials: test.owner@studymate.test / Test@123 (seeded in test database)
          - ‚ö†Ô∏è Backend test server MUST be running on port 8081 with test database studymate_test
          - ‚ö†Ô∏è NO EXCEPTIONS - Mocked authentication = Story REJECTED

          üß™ **E2E Test Requirements**:
          - ALL E2E tests MUST use ONLY data-testid selectors (NO text-based, NO CSS selectors)
          - ALL E2E tests MUST follow the 6 Quality Gates (see docs/guidelines/e2e-quality-gates-mandatory.md)
          - Dev Agent: Read ALL 4 mandatory guideline documents BEFORE implementation
          - Dev Agent: Use the copy-paste E2E test template from lessons-learned document
          - Dev Agent: Run validation commands before marking story "Done"
          - QA Agent: Validate against .bmad-core/checklists/e2e-quality-gate-checklist.md

          PRE-COMMIT VALIDATION COMMANDS (must return ZERO violations):
          ```bash
          # === FORM ELEMENTS (must return ZERO) ===
          grep -r "<button" src/app/features --include="*.html" | grep -v "data-testid"
          grep -r "<input" src/app/features --include="*.html" | grep -v "data-testid"
          grep -r "<select" src/app/features --include="*.html" | grep -v "data-testid"
          grep -r "<textarea" src/app/features --include="*.html" | grep -v "data-testid"

          # === INTERACTIVE ELEMENTS (must return ZERO) ===
          grep -r "(click)=" src/app/features --include="*.html" | grep "<div" | grep -v "data-testid"
          grep -r "(submit)=" src/app/features --include="*.html" | grep -v "data-testid"

          # === E2E TEST FRAGILE SELECTORS (must return ZERO) ===
          grep -n "has-text" e2e/*.spec.ts | grep -v "data-testid"
          grep -n "formControlName" e2e/*.spec.ts
          grep -n "placeholder" e2e/*.spec.ts

          # === RUN E2E TESTS (must achieve 100% pass rate) ===
          npx playwright test e2e/your-test.spec.ts
          ```

          See docs/guidelines/ui-testing-locators-mandatory.md for complete validation command list (14 checks).

          Required Information:
          - Critical user workflows to test end-to-end (e.g., "User registers and receives confirmation email")
          - API endpoints that must be validated with UI (e.g., POST /api/v1/auth/register)
          - Test data requirements (use fixtures from e2e/fixtures/ or create new)
          - Expected test utilities to use (from e2e/utils/: loginAsOwner, fillRegistrationForm, etc.)
          - Reference docs/testing/e2e-testing-guide.md for patterns

          Example:
          - Test workflow: Owner registration with gender field
          - API Integration: POST /api/v1/auth/register validates payload includes gender
          - Test Data: Use generateTestEmail() for unique test user
          - Expected E2E Tests:
            - Registration form submits to backend successfully
            - Backend validates gender field
            - Success toast displays after backend confirms
            - User redirected to login page after registration

          Skip this section if story is backend-only or infrastructure-only.
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

  - id: change-log
    title: Change Log
    type: table
    columns: [Date, Version, Description, Author]
    instruction: Track changes made to this story document
    owner: scrum-master
    editors: [scrum-master, dev-agent, qa-agent]

  - id: dev-agent-record
    title: Dev Agent Record
    instruction: This section is populated by the development agent during implementation
    owner: dev-agent
    editors: [dev-agent]
    sections:
      - id: agent-model
        title: Agent Model Used
        template: "{{agent_model_name_version}}"
        instruction: Record the specific AI agent model and version used for development
        owner: dev-agent
        editors: [dev-agent]

      - id: debug-log-references
        title: Debug Log References
        instruction: Reference any debug logs or traces generated during development
        owner: dev-agent
        editors: [dev-agent]

      - id: completion-notes
        title: Completion Notes List
        instruction: Notes about the completion of tasks and any issues encountered
        owner: dev-agent
        editors: [dev-agent]

      - id: file-list
        title: File List
        instruction: List all files created, modified, or affected during story implementation
        owner: dev-agent
        editors: [dev-agent]

  - id: qa-results
    title: QA Results
    instruction: Results from QA Agent QA review of the completed story implementation
    owner: qa-agent
    editors: [qa-agent]
