# <!-- Powered by BMAD‚Ñ¢ Core -->
template:
  id: story-template-v2
  name: Story Document
  version: 2.0
  output:
    format: markdown
    filename: docs/stories/{{epic_num}}.{{story_num}}.{{story_title_short}}.md
    title: "Story {{epic_num}}.{{story_num}}: {{story_title_short}}"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

agent_config:
  editable_sections:
    - Status
    - Story
    - Acceptance Criteria
    - Tasks / Subtasks
    - Dev Notes
    - Testing
    - Change Log

sections:
  - id: status
    title: Status
    type: choice
    choices: [Draft, Approved, InProgress, Review, Done]
    instruction: Select the current status of the story
    owner: scrum-master
    editors: [scrum-master, dev-agent]

  - id: story
    title: Story
    type: template-text
    template: |
      **As a** {{role}},
      **I want** {{action}},
      **so that** {{benefit}}
    instruction: Define the user story using the standard format with role, action, and benefit
    elicit: true
    owner: scrum-master
    editors: [scrum-master]

  - id: acceptance-criteria
    title: Acceptance Criteria
    type: numbered-list
    instruction: Copy the acceptance criteria numbered list from the epic file
    elicit: true
    owner: scrum-master
    editors: [scrum-master]

  - id: tasks-subtasks
    title: Tasks / Subtasks
    type: bullet-list
    instruction: |
      Break down the story into specific tasks and subtasks needed for implementation.
      Reference applicable acceptance criteria numbers where relevant.

      FOR UI/FULL-STACK STORIES - MANDATORY FIRST TASK:
      Add as the FIRST task before any implementation tasks:
      - [ ] **MANDATORY PRE-IMPLEMENTATION**: Read docs/guidelines/ui-testing-locators-mandatory.md
        - [ ] Review complete checklist of 40+ testable element types
        - [ ] Review naming conventions for data-testid attributes
        - [ ] Review 14 validation commands to run before commit
    template: |
      - [ ] Task 1 (AC: # if applicable)
        - [ ] Subtask1.1...
      - [ ] Task 2 (AC: # if applicable)
        - [ ] Subtask 2.1...
      - [ ] Task 3 (AC: # if applicable)
        - [ ] Subtask 3.1...
    elicit: true
    owner: scrum-master
    editors: [scrum-master, dev-agent]

  - id: dev-notes
    title: Dev Notes
    instruction: |
      Populate relevant information, only what was pulled from actual artifacts from docs folder, relevant to this story:
      - Do not invent information
      - If known add Relevant Source Tree info that relates to this story
      - If there were important notes from previous story that are relevant to this one, include them here
      - Put enough information in this section so that the dev agent should NEVER need to read the architecture documents, these notes along with the tasks and subtasks must give the Dev Agent the complete context it needs to comprehend with the least amount of overhead the information to complete the story, meeting all AC and completing all tasks+subtasks
    elicit: true
    owner: scrum-master
    editors: [scrum-master]
    sections:
      - id: testing-standards
        title: Testing
        instruction: |
          List Relevant Testing Standards from Architecture the Developer needs to conform to:
          - Test file location
          - Test standards
          - Testing frameworks and patterns to use
          - Any specific testing requirements for this story

          For UI/Full-Stack stories with E2E tests:
          - MANDATORY: Read docs/guidelines/ui-testing-locators-mandatory.md (all UI elements need data-testid)
          - MANDATORY: Read docs/guidelines/e2e-quality-gates-mandatory.md (6 critical quality gates)
          - MANDATORY: Follow docs/architecture/coding-standards.md E2E section
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: e2e-integration-testing
        title: E2E Integration Testing Requirements
        instruction: |
          For UI/Full-Stack stories only. Specify E2E integration tests that validate backend + frontend together.
          Use E2E test infrastructure (backend test server on port 8081, database studymate - shared with development).

          MANDATORY PRE-IMPLEMENTATION CHECKLIST (5 minutes - saves 60+ minutes):
          - [ ] Read docs/guidelines/e2e-authentication-mandatory.md (CRITICAL - Real auth required, NO mocks)
          - [ ] Read docs/lessons-learned/e2e-testing-anti-patterns-story-1.4.1.md (MANDATORY - Original 5 anti-patterns)
          - [ ] Read docs/lessons-learned/e2e-testing-anti-patterns-story-1.4-remediation.md (CRITICAL - Anti-Pattern #6)
          - [ ] Read docs/guidelines/ui-testing-locators-mandatory.md (MANDATORY - data-testid requirements)
          - [ ] Read docs/testing/e2e-quality-gates-quick-reference.md (Quick Reference Card)
          - [ ] Read existing E2E tests in feature area (e2e/*.spec.ts)
          - [ ] Read component template and SCSS files
          - [ ] Verify API configuration in environment.ts

          MANDATORY BEFORE EXECUTING E2E TESTS:
          - [ ] **STOP all backend servers** (ports 8080, 8081) to avoid conflicts
          - [ ] **STOP frontend dev server** (port 4200) - Playwright will start it automatically
          - [ ] Verify no processes on ports: lsof -ti:4200,8080,8081

          CRITICAL: 6 ANTI-PATTERNS TO AVOID:
          1. ‚ùå Ambiguous Selectors (use scoped selectors with parent class)
          2. ‚ùå Selector Ambiguity (multiple matches cause strict mode violations)
          3. ‚ùå Path-Only Route Mocking (always use full URL: http://localhost:8081/api/v1/...)
          4. ‚ùå CSS Targeting Wrong Element (read SCSS to identify actual styled element)
          5. ‚ùå Not Reading Existing Tests (ALWAYS read existing tests FIRST)
          6. ‚≠ê Missing data-testid Attributes (ADD DURING COMPONENT DEVELOPMENT, NOT E2E TESTING) ‚≠ê

          MANDATORY REQUIREMENTS (NON-NEGOTIABLE):

          üìã **UI Testing Locators** (docs/guidelines/ui-testing-locators-mandatory.md):
          - ‚ö†Ô∏è ALL interactive UI elements MUST have data-testid attributes (40+ element types - see guideline)
          - ‚ö†Ô∏è Add data-testid DURING component development (NOT during E2E testing)
          - ‚ö†Ô∏è Follow naming convention: {component}-{element-type}-{action/purpose}
          - ‚ö†Ô∏è Run 14 validation commands before commit (must return ZERO violations)
          - ‚ö†Ô∏è NO EXCEPTIONS - Any missing data-testid = Story REJECTED

          üîê **E2E Authentication Requirements** (docs/guidelines/e2e-authentication-mandatory.md):
          - ‚ö†Ô∏è ALL E2E tests MUST use REAL authentication (NO mocked tokens, NO bypassing login)
          - ‚ö†Ô∏è Use `loginAsOwnerAPI(page)`, `loginAsStudentAPI(page)`, or `loginAsAdminAPI(page)` from auth-helpers.ts
          - ‚ö†Ô∏è **Official Test Credentials:** `owner@studymate.com` / `Test@123` (ROLE_OWNER) OR `student@studymate.com` / `Test@123` (ROLE_STUDENT) OR `admin@studymate.com` / `Test@123` (ROLE_ADMIN)
          - ‚ö†Ô∏è **Source:** V3__insert_test_users.sql migration - **CRITICAL**: See docs/testing/test-credentials-reference.md
          - ‚ö†Ô∏è **WRONG Credentials (DO NOT USE):** test.owner@studymate.test, e2eowner@studymate.com (not in database)
          - ‚ö†Ô∏è Database: studymate (shared with development - no separate test database)
          - ‚ö†Ô∏è Backend test server MUST be running on port 8081
          - ‚ö†Ô∏è NO EXCEPTIONS - Mocked authentication = Story REJECTED

          üß™ **E2E Test Requirements**:
          - ALL E2E tests MUST use ONLY data-testid selectors (NO text-based, NO CSS selectors)
          - ALL E2E tests MUST follow the 6 Quality Gates (see docs/guidelines/e2e-quality-gates-mandatory.md)
          - Dev Agent: Read ALL 4 mandatory guideline documents BEFORE implementation
          - Dev Agent: Use the copy-paste E2E test template from lessons-learned document
          - Dev Agent: Run validation commands before marking story "Done"
          - QA Agent: Validate against .bmad-core/checklists/e2e-quality-gate-checklist.md

          PRE-COMMIT VALIDATION COMMANDS (must return ZERO violations):
          ```bash
          # === FORM ELEMENTS (must return ZERO) ===
          grep -r "<button" src/app/features --include="*.html" | grep -v "data-testid"
          grep -r "<input" src/app/features --include="*.html" | grep -v "data-testid"
          grep -r "<select" src/app/features --include="*.html" | grep -v "data-testid"
          grep -r "<textarea" src/app/features --include="*.html" | grep -v "data-testid"

          # === INTERACTIVE ELEMENTS (must return ZERO) ===
          grep -r "(click)=" src/app/features --include="*.html" | grep "<div" | grep -v "data-testid"
          grep -r "(submit)=" src/app/features --include="*.html" | grep -v "data-testid"

          # === E2E TEST FRAGILE SELECTORS (must return ZERO) ===
          grep -n "has-text" e2e/*.spec.ts | grep -v "data-testid"
          grep -n "formControlName" e2e/*.spec.ts
          grep -n "placeholder" e2e/*.spec.ts

          # === RUN E2E TESTS (must achieve 100% pass rate) ===
          npx playwright test e2e/your-test.spec.ts
          ```

          See docs/guidelines/ui-testing-locators-mandatory.md for complete validation command list (14 checks).

          Required Information:
          - Critical user workflows to test end-to-end (e.g., "User registers and receives confirmation email")
          - API endpoints that must be validated with UI (e.g., POST /api/v1/auth/register)
          - Test data requirements (use fixtures from e2e/fixtures/ or create new)
          - Expected test utilities to use (from e2e/utils/: loginAsOwner, fillRegistrationForm, etc.)
          - Reference docs/testing/e2e-testing-guide.md for patterns

          Example:
          - Test workflow: Owner registration with gender field
          - API Integration: POST /api/v1/auth/register validates payload includes gender
          - Test Data: Use generateTestEmail() for unique test user
          - Expected E2E Tests:
            - Registration form submits to backend successfully
            - Backend validates gender field
            - Success toast displays after backend confirms
            - User redirected to login page after registration

          Skip this section if story is backend-only or infrastructure-only.
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: api-url-construction
        title: API URL Construction Standard
        instruction: |
          For ALL UI stories with backend API integration - MANDATORY API URL pattern documentation.

          This section prevents repeated API URL construction errors that cause E2E test failures.

          Copy the following template into the story's Tasks/Subtasks section OR Dev Notes section:

          ---

          ### API URL Construction Standard

          **CRITICAL:** ALL Angular services MUST follow this exact pattern for API URL construction.

          #### Universal Pattern (Use for ALL Services)

          ```typescript
          import { inject } from '@angular/core';
          import { HttpClient } from '@angular/common/http';
          import { environment } from '@env/environment';

          @Injectable({ providedIn: 'root' })
          export class YourService {
            private http = inject(HttpClient);

            // ‚úÖ CORRECT - Universal pattern for ALL backend APIs
            private readonly API_URL = environment.apiBaseUrl
              ? `${environment.apiBaseUrl}/api/v1/your/endpoint`  // E2E: http://localhost:8081/api/v1/your/endpoint
              : '/api/v1/your/endpoint';                          // Dev: /api/v1/your/endpoint (proxy rewrites)

            // Example for specific endpoints:
            // - Auth: `/api/v1/auth/login`
            // - Halls: `/api/v1/owner/halls`
            // - Pricing: `/api/v1/owner/halls/{id}/pricing`
          }
          ```

          #### Why This Pattern Works

          **Backend API Structure:**
          - ALL backend endpoints are under `/api/v1/*` path
          - Example: `POST /api/v1/auth/register`
          - Example: `GET /api/v1/owner/halls`
          - Example: `PUT /api/v1/owner/halls/{id}/pricing`

          **Development Environment:**
          - Angular proxy (proxy.conf.json) rewrites `/api/v1/*` ‚Üí `http://localhost:8080/api/v1/*`
          - Service uses: `/api/v1/owner/halls`
          - Proxy forwards to: `http://localhost:8080/api/v1/owner/halls`

          **E2E Test Environment:**
          - `environment.apiBaseUrl = 'http://localhost:8081'`
          - Service constructs: `http://localhost:8081/api/v1/owner/halls`
          - Directly calls backend test server on port 8081

          #### Common Mistakes (DO NOT USE)

          ```typescript
          // ‚ùå WRONG - Missing /api/v1 prefix in E2E
          private readonly API_URL = environment.apiBaseUrl
            ? `${environment.apiBaseUrl}/owner/halls`     // E2E fails: 404 Not Found
            : '/api/v1/owner/halls';

          // ‚ùå WRONG - Missing /v1 in dev environment
          private readonly API_URL = environment.apiBaseUrl
            ? `${environment.apiBaseUrl}/api/v1/owner/halls`
            : '/api/owner/halls';                         // Dev fails: proxy mismatch

          // ‚ùå WRONG - Inconsistent prefix
          private readonly API_URL = environment.apiBaseUrl
            ? `${environment.apiBaseUrl}/owner/halls`
            : '/api/owner/halls';                         // Both environments fail

          // ‚ùå WRONG - Hardcoded full URL
          private readonly API_URL = 'http://localhost:8080/api/v1/owner/halls';  // Breaks E2E tests
          ```

          #### Verification Commands

          **1. Verify Proxy Configuration (proxy.conf.json):**
          ```json
          {
            "/api/v1": {
              "target": "http://localhost:8080",
              "secure": false,
              "changeOrigin": true,
              "logLevel": "debug"
            }
          }
          ```

          **2. Test API URL in Dev:**
          ```bash
          # Start frontend (port 4200)
          npm start

          # In browser console, check network tab:
          # Request URL: http://localhost:4200/api/v1/owner/halls
          # Proxied to: http://localhost:8080/api/v1/owner/halls
          ```

          **3. Test API URL in E2E:**
          ```bash
          # Start backend test server (port 8081)
          cd studymate-backend && ./scripts/start-test-server.sh

          # Verify endpoint exists
          curl http://localhost:8081/api/v1/owner/halls -H "Authorization: Bearer $TOKEN"
          # Expected: 200 OK with data
          # NOT: 404 Not Found, 500 No endpoint
          ```

          #### Implementation Checklist

          - [ ] Service uses universal pattern: `environment.apiBaseUrl ? '${apiBaseUrl}/api/v1/...' : '/api/v1/...'`
          - [ ] ALL endpoint paths include `/api/v1` prefix
          - [ ] Proxy configuration matches pattern in proxy.conf.json
          - [ ] Dev environment tested (npm start + manual browser test)
          - [ ] E2E environment tested (backend on 8081 + Playwright tests)
          - [ ] No hardcoded URLs in service code

          ---

          When adding to story:
          1. Replace `your/endpoint` with actual API endpoint path
          2. Add to Dev Notes section for reference during implementation
          3. Include in service implementation task checklist
          4. Verify pattern during code review before marking story "Done"
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: e2e-authentication
        title: E2E Authentication Setup
        instruction: |
          For ALL UI stories with E2E tests - MANDATORY authentication documentation.

          This section MUST be included in every UI story's Tasks section to prevent repeated authentication debugging cycles.

          Copy the following template into the story's Tasks/Subtasks section (insert before the E2E testing task):

          ---

          ### Task X: E2E Authentication Setup (AC: All)

          #### Authentication Prerequisites
          **MANDATORY: Read BEFORE implementing E2E tests:**
          - [ ] Read `docs/guidelines/e2e-authentication-mandatory.md`
          - [ ] Read `docs/testing/test-credentials-reference.md`
          - [ ] Read `docs/testing/e2e-authentication-checklist.md` (Quick Reference)

          #### User Type & Test Credentials
          **User Type:** [SPECIFY ONE: Owner | Student | Admin]

          **Official Test Credentials:**
          - **Email:** [SPECIFY from table below]
          - **Password:** [SPECIFY from table below]
          - **Role:** [SPECIFY: ROLE_OWNER | ROLE_STUDENT | ROLE_ADMIN]

          **Official Credentials Table:**
          | User Type | Email | Password | Role | Use Case |
          |-----------|-------|----------|------|----------|
          | Owner | `owner@studymate.com` | `Test@123` | ROLE_OWNER | Owner dashboard, hall management, onboarding |
          | Student | `student@studymate.com` | `Test@123` | ROLE_STUDENT | Student dashboard, booking, seat selection |
          | Admin | `admin@studymate.com` | `Test@123` | ROLE_ADMIN | Admin panel, user management, reports |

          **Source:** `studymate-backend/src/main/resources/db/migration/V3__insert_test_users.sql`

          **‚ö†Ô∏è WRONG Credentials (DO NOT USE):**
          - ‚ùå `test.owner@studymate.test` / `Test@123` (not in database)
          - ‚ùå `e2eowner@studymate.com` / `Test@1234` (not in database)
          - ‚ùå `testowner@example.com` (not in database)

          #### E2E Authentication Implementation Steps
          1. **Import Authentication Helper:**
             ```typescript
             // In e2e/[feature].spec.ts
             import { loginAsOwnerAPI, loginAsStudentAPI, loginAsAdminAPI } from './utils/auth-helpers';
             ```

          2. **Add beforeEach Authentication:**
             ```typescript
             test.beforeEach(async ({ page }) => {
               // MANDATORY: Use real authentication (NO mocks, NO bypasses)
               const token = await loginAsOwnerAPI(page); // or loginAsStudentAPI, loginAsAdminAPI
               expect(token).toBeTruthy();
             });
             ```

          3. **Verify Backend Running:**
             ```bash
             # Before running E2E tests
             curl http://localhost:8081/auth/login
             # Expected: 400 Bad Request (endpoint exists, awaiting POST body)
             # NOT: Connection refused, 404 Not Found
             ```

          4. **Verify Test User Exists:**
             ```bash
             PGPASSWORD=studymate_user psql -h localhost -U studymate_user -d studymate \
               -c "SELECT email, role FROM users WHERE email = 'owner@studymate.com';"
             # Expected: 1 row with matching email and ROLE_OWNER
             ```

          5. **Verify Backend Compiled Successfully:**
             ```bash
             cd studymate-backend
             ./scripts/verify-before-commit.sh
             # Expected: ‚úÖ Backend verification passed!
             # NOT: BUILD FAILURE or compilation errors
             ```

          #### Common Authentication Errors
          | Error Message | Root Cause | Solution |
          |---------------|------------|----------|
          | `‚ùå Login failed: 401 Invalid email or password` | Wrong credentials used | Use official credentials from table above |
          | `Token is null` | Auth endpoint failed | Check backend logs, verify user exists |
          | `Connection refused` on 8081 | Backend not running | Run `./scripts/start-test-server.sh` |
          | `500 Internal Server Error` | Backend compilation failed | Run `./scripts/verify-before-commit.sh` |
          | User not found in database | Migration not applied | Verify `V3__insert_test_users.sql` ran |

          #### Task Checklist
          - [ ] User type specified (Owner/Student/Admin)
          - [ ] Credentials copied from official table above
          - [ ] Auth helper imported in E2E test file
          - [ ] `beforeEach` authentication added with token validation
          - [ ] Backend running verification performed
          - [ ] Test user existence verified in database
          - [ ] Backend compilation verified before E2E execution

          ---

          When adding to story:
          1. Replace `[SPECIFY ONE: Owner | Student | Admin]` with actual user type
          2. Replace `[SPECIFY from table below]` with actual credentials from table
          3. Replace `loginAsOwnerAPI` with appropriate helper (Owner/Student/Admin)
          4. Add this task BEFORE the main E2E testing task (usually Task X-1)
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: e2e-execution-steps
        title: "E2E Test Execution Steps (Acceptance Criteria)"
        instruction: |
          For UI stories with E2E tests, include this standardized AC section in the story's Acceptance Criteria.

          This section provides step-by-step operational procedures for executing E2E tests, ensuring developers
          can run tests successfully without troubleshooting environment issues.

          Copy the following template into the story's Acceptance Criteria section (after all functional AC):

          ---

          ### E2E Test Execution (Mandatory for Story Completion)

          **Pre-Execution Checklist** (MUST verify before running tests):
          - [ ] STOP all running backend servers (ports 8080, 8081): `lsof -ti:8080,8081 | xargs kill`
          - [ ] STOP frontend dev server (port 4200): `lsof -ti:4200 | xargs kill`
          - [ ] Verify PostgreSQL is running: `brew services list | grep postgresql`
          - [ ] Verify test database exists: `PGPASSWORD=studymate_user psql -h localhost -U studymate_user -d studymate -c "SELECT 1"`

          **Step 1: Start Backend Test Server**
          ```bash
          cd ../studymate-backend
          ./scripts/start-test-server.sh
          ```
          - **Port**: 8081
          - **Verification**: Server logs show "Started StudyMateApplication" and "Flyway migration completed"
          - **Authentication Endpoint**: `http://localhost:8081/auth/login`
          - **Official Test Credentials:**
            - Owner: `owner@studymate.com` / `Test@123` (ROLE_OWNER)
            - Student: `student@studymate.com` / `Test@123` (ROLE_STUDENT)
            - Admin: `admin@studymate.com` / `Test@123` (ROLE_ADMIN)
          - **‚ö†Ô∏è CRITICAL:** See `docs/testing/test-credentials-reference.md` for complete credentials list

          **Step 2: Verify Backend Health**
          ```bash
          # In new terminal
          curl http://localhost:8081/auth/register
          ```
          - **Expected**: HTTP 400 or 200 (endpoint responds, not 404)

          **Step 3: Run E2E Tests**
          ```bash
          # From studymate-frontend directory
          npx playwright test e2e/[STORY-SPEC-FILE].spec.ts --project=chromium
          ```
          - Replace `[STORY-SPEC-FILE]` with actual spec file name (e.g., `owner-onboarding-wizard`)
          - Playwright will auto-start frontend on port 4200 (via `webServer` config)
          - **Do NOT manually start frontend** - Playwright manages it

          **Step 4: Verify Results**
          - [ ] All tests pass (X/X green checkmarks) - specify expected test count
          - [ ] Zero console errors in test output
          - [ ] Screenshots captured in `e2e/screenshots/` directory (X screenshots expected) - specify count
          - [ ] Review screenshots for visual regressions

          **Step 5: Cleanup**
          ```bash
          # Stop backend server (Ctrl+C in terminal)
          # Playwright auto-stops frontend
          ```

          **Troubleshooting**:
          - **Port conflict errors**: Verify no processes on ports via `lsof -ti:4200,8080,8081`
          - **Authentication failures**: Check backend logs for JWT token generation
          - **API 404 errors**: Verify backend server fully started (wait 30s after startup)
          - **Timeout errors**: Increase `timeout` in `playwright.config.ts` (current: 30000ms)

          **Documentation References**:
          - E2E Execution Guide: `docs/testing/e2e-execution-guide.md`
          - Playwright Config: `playwright.config.ts`
          - Backend Startup Script: `studymate-backend/scripts/start-test-server.sh`

          ---

          When adding to story:
          1. Replace `[STORY-SPEC-FILE]` with actual E2E spec file name
          2. Replace `X/X` with expected test count (e.g., "7/7" if 7 tests)
          3. Replace `X screenshots` with expected screenshot count (e.g., "10 screenshots")
          4. Add this as final AC section (e.g., AC7, AC8) after all functional acceptance criteria
        elicit: false
        owner: scrum-master
        editors: [scrum-master]

  - id: change-log
    title: Change Log
    type: table
    columns: [Date, Version, Description, Author]
    instruction: Track changes made to this story document
    owner: scrum-master
    editors: [scrum-master, dev-agent, qa-agent]

  - id: dev-agent-record
    title: Dev Agent Record
    instruction: This section is populated by the development agent during implementation
    owner: dev-agent
    editors: [dev-agent]
    sections:
      - id: agent-model
        title: Agent Model Used
        template: "{{agent_model_name_version}}"
        instruction: Record the specific AI agent model and version used for development
        owner: dev-agent
        editors: [dev-agent]

      - id: debug-log-references
        title: Debug Log References
        instruction: Reference any debug logs or traces generated during development
        owner: dev-agent
        editors: [dev-agent]

      - id: completion-notes
        title: Completion Notes List
        instruction: Notes about the completion of tasks and any issues encountered
        owner: dev-agent
        editors: [dev-agent]

      - id: file-list
        title: File List
        instruction: List all files created, modified, or affected during story implementation
        owner: dev-agent
        editors: [dev-agent]

  - id: qa-results
    title: QA Results
    instruction: Results from QA Agent QA review of the completed story implementation
    owner: qa-agent
    editors: [qa-agent]
