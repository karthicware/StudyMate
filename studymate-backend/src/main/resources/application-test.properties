# ========================================
# Test Profile - E2E Testing Configuration
# ========================================

# Server Configuration
server.port=${TEST_SERVER_PORT:8081}

# Database - PostgreSQL Database (shared with development)
spring.datasource.url=jdbc:postgresql://localhost:5432/studymate
spring.datasource.username=studymate_user
spring.datasource.password=studymate_user
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate - Validate schema matches entities (prevents schema drift)
# IMPORTANT: Use 'validate' instead of 'create-drop' to ensure E2E tests use
# the exact same schema as production (via Flyway migrations)
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway - ENABLED for E2E testing (ensures production-identical schema)
# This prevents schema drift between test and production environments
spring.flyway.enabled=true
spring.flyway.clean-disabled=false
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration

# JWT Configuration - Test-specific
jwt.secret=${JWT_SECRET:test-secret-key-for-e2e-testing-only-not-for-production}
jwt.expiration-ms=${JWT_EXPIRATION_MS:3600000}

# Logging - Debug level for troubleshooting E2E tests
logging.level.root=WARN
logging.level.com.studymate.backend=DEBUG
logging.level.org.springframework.security=INFO
logging.level.org.springframework.web=INFO
logging.level.org.flywaydb=INFO

# CORS - Allow E2E test frontend
# Note: This will be handled by CORS configuration in Java code
